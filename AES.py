Rcon = [0x01, 0x02, 0x04, 0x08, 0x10, 0x20,
        0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab]

bloco_teste = [
    5, 9, 7, 2, 4, 7, 6, 6, 5, 5, 0, 0, 3, 9, 2, 2,
    5, 9, 1, 2, 0, 8, 8, 8, 5, 7, 6, 1, 2, 8, 9, 3,
    0, 6, 1, 9, 5, 9, 3, 2, 8, 9, 8, 6, 2, 4, 0, 8,
    6, 2, 9, 8, 7, 4, 4, 3, 4, 1, 7, 3, 5, 1, 4, 1,
    9, 8, 8, 3, 2, 8, 4, 4, 8, 0, 1, 9, 5, 3, 4, 0,
    2, 4, 8, 6, 7, 1, 7, 5, 3, 4, 0, 3, 8, 3, 0, 8,
    0, 4, 2, 9, 8, 4, 3, 6, 8, 0, 4, 0, 1, 7, 0, 2,
    6, 5, 1, 0, 6, 5, 1, 9, 8, 5, 4, 4, 7, 1, 2, 7,
    2, 5, 7, 8, 4, 5, 9, 7, 2, 4, 1, 0, 9, 4, 4, 6,
    8, 1, 2, 4, 3, 3, 4, 6, 0, 5, 8, 9, 2, 9, 4, 8,
    8, 5, 4, 0, 3, 7, 5, 8, 1, 2, 7, 1, 9, 3, 8, 9,
    7, 3, 7, 5, 5, 0, 6, 5, 6, 5, 8, 7, 5, 4, 5, 4,
    0, 6, 4, 5, 7, 4, 8, 1, 4, 6, 3, 5, 9, 9, 3, 0,
    8, 2, 5, 7, 2, 9, 2, 1, 2, 5, 9, 2, 9, 5, 2, 2,
    0, 2, 6, 7, 9, 7, 9, 6, 6, 7, 3, 3, 0, 1, 9, 2,
    4, 7, 7, 4, 8, 3, 6, 4, 0, 7, 1, 3, 1, 1, 4, 7
]

sbox = [
    0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
    0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
    0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
    0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
    0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
    0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
    0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
    0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
    0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
    0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
    0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
    0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
    0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
    0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
    0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
    0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16
]

sboxInv = [
    0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb,
    0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb,
    0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e,
    0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25,
    0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92,
    0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84,
    0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06,
    0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b,
    0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73,
    0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e,
    0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b,
    0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4,
    0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f,
    0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef,
    0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61,
    0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d
]

def fazXOR(c1, c2):
    c3 = []
    for i in range(len(c1)):
        c3.append(c1[i] ^ c2[i])

    return c3
  
def addChaveRed(block, key):
    for i in range(len(block)):
        block[i] = block[i] ^ key[i]

    return block

def SubBytes(block):
    for i in range(len(block)):
        block[i] = sbox[block[i]]

    return block


def SubBytesInv(block):
    for i in range(len(block)):
        block[i] = sboxInv[block[i]]

    return block

def rotaciona(word, n):
    return word[n:]+word[0:n]


def shiftCol(block):
    for i in range(4):
        block[i*4:i*4+4] = rotaciona(block[i*4:i*4+4], i)

    return block


def shiftColInv(block):
    for i in range(4):
        block[i*4:i*4+4] = rotaciona(block[i*4:i*4+4], -i)

    return block

def multGalois(b):
    if b & 0x80:
        b = b << 1
        b ^= 0x1B
    else:
        b = b << 1

    return b & 0xFF
    # pega os primeiros 8 bits.


def mist1Col(c):
    t = c[0] ^ c[1] ^ c[2] ^ c[3]
    u = c[0]
    c[0] ^= multGalois(c[0] ^ c[1]) ^ t
    c[1] ^= multGalois(c[1] ^ c[2]) ^ t
    c[2] ^= multGalois(c[2] ^ c[3]) ^ t
    c[3] ^= multGalois(c[3] ^ u) ^ t

    return c


def mistCol(block):
    l1, l2, l3, l4 = [], [], [], []
    for i in range(4):
        column = []
        column.extend((block[i], block[i+4], block[i+8], block[i+12]))
        column = mist1Col(column)
        l1.append(column[0])
        l2.append(column[1])
        l3.append(column[2])
        l4.append(column[3])

    return (l1+l2+l3+l4)


def InvmistCol(block):
    l1, l2, l3, l4 = [], [], [], []
    for i in range(4):
        column = []
        column.extend((block[i], block[i+4], block[i+8], block[i+12]))
        l1.append(column[0])
        l2.append(column[1])
        l3.append(column[2])
        l4.append(column[3])

    for i in range(4):
        u = multGalois(multGalois(l1[i] ^ l3[i]))
        v = multGalois(multGalois(l2[i] ^ l4[i]))
        l1[i] ^= u
        l2[i] ^= v
        l3[i] ^= u
        l4[i] ^= v

    return (mistCol(l1+l2+l3+l4))
  
def expandeChave(key, i):
    last_column = []
    l1, l2, l3, l4 = [], [], [], []
    for j in range(1, 17):
        if j % 4 == 0:
            last_column.append(key[j-1])

    aux = last_column[0]
    last_column.pop(0)
    last_column.append(aux)
    last_column = SubBytes(last_column)

    for j in range(0, 4):
        if j >= 1:
            aux_col = []
            for w in range(0, 16):
                if(w % 4 == 0):
                    aux_col.append(key[w+j])

            ant_c = fazXOR(aux_col, ant_c)
            l1.append(ant_c[0])
            l2.append(ant_c[1])
            l3.append(ant_c[2])
            l4.append(ant_c[3])

        else:
            n_col = []
            n_col.extend((key[0], key[4], key[8], key[12]))
            n_col = fazXOR(last_column, n_col)
            value = Rcon[i] ^ n_col[0]
            n_col[0] = value
            ant_c = n_col
            l1.append(ant_c[0])
            l2.append(ant_c[1])
            l3.append(ant_c[2])
            l4.append(ant_c[3])

    return (l1+l2+l3+l4)
  
def AESfunc(n, block, key, op):
    inv_key = []
    aux = key
    inv_key.append(aux)
    for i in range(13):
        aux = expandeChave(aux, i)
        inv_key.append(aux)

    if(op == 1): 
        block = addChaveRed(block, key)
        # primeira iteracao
        for i in range(1, n):
            block = SubBytes(block)
            # print("conversao do bloco")
            # print(block)
            # conversao do bloco utilizando a sbox
            block = shiftCol(block)
            # print("shift left das linhas")
            # print(block)
            # shift left das linhas
            block = mistCol(block)
            # print("embaralhamento")
            # print(block)
            # embaralha os elementos por coluna 
            key = expandeChave(key, i-1)
            # pega uma nova chave
            block = addChaveRed(block, key)

        if(n != 0):
            block = SubBytes(block)
            block = shiftCol(block)
            key = expandeChave(key, n-1)
            block = addChaveRed(block, key)

    elif(op == 2): 
        au1 = n
        block = addChaveRed(block, inv_key[n])
        while(au1 > 0):
            if(au1 > 1):
                block = SubBytesInv(block)
                block = shiftColInv(block)
                block = addChaveRed(block, inv_key[au1-1])
                block = InvmistCol(block)
            else:
                block = shiftColInv(block)
                block = SubBytesInv(block)
                block = addChaveRed(block, inv_key[0])
            au1 -= 1
    return block

print(AESfunc(10, bloco_teste, sbox, 1))
print(AESfunc(10, AESfunc(10, bloco_teste, sbox, 1), sboxInv, 2))
